import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:pocketjob/models/jobListing.dart';
import 'package:pocketjob/providers/updateJobsProvider.dart';
import 'package:pocketjob/utils/texts.dart';

class JobListingCard extends ConsumerWidget {
  final JobListing job;
  final bool showLocation;
  final bool applied;
  const JobListingCard(
      {super.key,
      required this.job,
      required this.showLocation,
      required this.applied});

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final savedJobListIds = ref.watch(bookmarkedJobsProvider);
    print("dataataat" + job.company);
    if (job == null) {
      print("null detectedd");
    }
    return Card(
      elevation: 2,
      child: Container(
        padding: const EdgeInsets.only(left: 20, right: 20, top: 20),
        width: MediaQuery.of(context).size.width * 0.75,
        height: showLocation
            ? MediaQuery.of(context).size.height * 0.3
            : MediaQuery.of(context).size.height * 0.28,
        decoration: BoxDecoration(
          color: Colors.white,
          borderRadius: BorderRadius.circular(20),
        ),
        child: savedJobListIds.when(
          data: (jobs) => Column(
            mainAxisAlignment: MainAxisAlignment.spaceBetween,
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              applied
                  ? const Row(
                      mainAxisAlignment: MainAxisAlignment.end,
                      children: [
                        Chip(
                          labelPadding: EdgeInsets.zero,
                          label: Text("Applied"),
                        )
                      ],
                    )
                  : Container(),
              Row(
                children: [
                  Container(
                    height: 60,
                    width: 60,
                    decoration: BoxDecoration(
                        borderRadius:
                            const BorderRadius.all(Radius.circular(20)),
                        image:
                            DecorationImage(image: NetworkImage(job.imageUrl))),
                  ),
                  const SizedBox(
                    width: 5,
                  ),
                  Expanded(
                    flex: 8,
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        SizedBox(
                          width: MediaQuery.of(context).size.width * 0.55,
                          child: Text(
                            job.title,
                            style: heading2(),
                            // maxLines: 2,
                          ),
                        ),
                        Text(job.company, style: company_name()),
                      ],
                    ),
                  ),
                  const Spacer(),
                  IconButton(
                      onPressed: () async {
                        List<String> list =
                            ref.read(bookmarkedJobsProvider.notifier).list;
                        print("error");
                        ref
                            .read(bookmarkedJobsProvider.notifier)
                            .updateJobList(job.id!);
                        print(list);
                      },
                      icon: Icon(
                        Icons.bookmark_add_rounded,
                        size: 28,
                        color: ref
                                .read(bookmarkedJobsProvider.notifier)
                                .list
                                .contains(job.id)
                            ? Colors.blue
                            : Colors.grey,
                      )),
                ],
              ),
              // const SizedBox(
              //   height: 10,
              // ),
              showLocation
                  ? Row(
                      children: [
                        Icon(
                          Icons.pin_drop_rounded,
                          color: Theme.of(context).colorScheme.primary,
                        ),
                        Text(
                          job.city != null ? job.city! + " , " : "",
                          style: company_name(),
                        ),
                        Text(
                          job.country,
                          style: company_name(),
                        ),
                      ],
                    )
                  : Container(),
              // const SizedBox(height: 10),
              Wrap(
                spacing: 6,
                alignment: WrapAlignment.start,
                children: job.type
                    .map((e) => Chip(
                        backgroundColor:
                            Theme.of(context).colorScheme.secondary,
                        side: BorderSide.none,
                        label: Text(
                          e,
                          style: const TextStyle(
                              fontSize: 11, fontWeight: FontWeight.w600),
                        )))
                    .toList(),
              ),
              !applied ? const Divider() : Container(),
              //  const Spacer(),
              job.salary != null && applied == false
                  ? Expanded(
                      child: Row(
                        mainAxisAlignment: MainAxisAlignment.end,
                        children: [
                          RichText(
                            text: TextSpan(
                              text: job.salary != null
                                  ? "Rs " + job.salary.toString()
                                  : "",
                              style: blue_subheading(),
                              children: <TextSpan>[
                                TextSpan(
                                  text: job.salary != null ? "/month" : "",
                                  style: body3(),
                                )
                              ],
                            ),
                          ),
                        ],
                      ),
                    )
                  : Container(),
            ],
          ),
          error: (error, stack) => Text(error.toString()),
          loading: () => CircularProgressIndicator(),
        ),
      ),
    );
  }
}
