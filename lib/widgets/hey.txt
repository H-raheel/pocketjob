 Column(
          mainAxisAlignment: MainAxisAlignment.spaceBetween,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            applied
                ? const Row(
                    mainAxisAlignment: MainAxisAlignment.end,
                    children: [
                      Chip(
                        labelPadding: EdgeInsets.zero,
                        label: Text("Applied"),
                      )
                    ],
                  )
                : Container(),
            Row(
              children: [
                Container(
                  height: 60,
                  width: 60,
                  decoration: BoxDecoration(
                      borderRadius: const BorderRadius.all(Radius.circular(20)),
                      image:
                          DecorationImage(image: NetworkImage(job.imageUrl))),
                ),
                const SizedBox(
                  width: 5,
                ),
                Expanded(
                  flex: 8,
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      SizedBox(
                        width: MediaQuery.of(context).size.width * 0.55,
                        child: Text(
                          job.title,
                          style: heading2(),
                          // maxLines: 2,
                        ),
                      ),
                      Text(job.company, style: company_name()),
                    ],
                  ),
                ),
                const Spacer(),
                IconButton(
                    onPressed: () async {
                      List<String> list =
                          ref.read(bookmarkedJobsProvider.notifier).list;
                      ref
                          .read(bookmarkedJobsProvider.notifier)
                          .updateJobList(job.id!);
                      print(list);
                    },
                    icon: Icon(
                      Icons.bookmark_add_rounded,
                      size: 28,
                      color: ref
                              .read(bookmarkedJobsProvider.notifier)
                              .list
                              .contains(job.id)
                          ? Colors.blue
                          : Colors.grey,
                    )),
              ],
            ),
            // const SizedBox(
            //   height: 10,
            // ),
            showLocation
                ? Row(
                    children: [
                      Icon(
                        Icons.pin_drop_rounded,
                        color: Theme.of(context).colorScheme.primary,
                      ),
                      Text(
                        job.city != null ? job.city! + " , " : "",
                        style: company_name(),
                      ),
                      Text(
                        job.country,
                        style: company_name(),
                      ),
                    ],
                  )
                : Container(),
            // const SizedBox(height: 10),
            Wrap(
              spacing: 6,
              alignment: WrapAlignment.start,
              children: job.type
                  .map((e) => Chip(
                      backgroundColor: Theme.of(context).colorScheme.secondary,
                      side: BorderSide.none,
                      label: Text(
                        e,
                        style: const TextStyle(
                            fontSize: 11, fontWeight: FontWeight.w600),
                      )))
                  .toList(),
            ),
            !applied ? const Divider() : Container(),
            //  const Spacer(),
            job.salary != null && applied == false
                ? Expanded(
                    child: Row(
                      mainAxisAlignment: MainAxisAlignment.end,
                      children: [
                        RichText(
                          text: TextSpan(
                            text: job.salary != null
                                ? "Rs " + job.salary.toString()
                                : "",
                            style: blue_subheading(),
                            children: <TextSpan>[
                              TextSpan(
                                text: job.salary != null ? "/month" : "",
                                style: body3(),
                              )
                            ],
                          ),
                        ),
                      ],
                    ),
                  )
                : Container(),
          ],
        ),




        import 'dart:core';

import 'package:pocketjob/providers/userServprovider.dart';
import 'package:pocketjob/serv/authentication.dart';
import 'package:pocketjob/serv/userServ.dart';
import 'package:riverpod_annotation/riverpod_annotation.dart';

part 'updateJobsProvider.g.dart';

@riverpod
//make this future
class BookmarkedJobs extends _$BookmarkedJobs {
  List<String> list = [];
  @override
  Future<List<String>> build() async {
    // await getFromFirebase();
    return await getFromFirebase();
  }

  // Future getFromFirebase() async {
  //   final userservice = ref.read(userserviceProvider);
  //   state = const AsyncLoading();

  //   state = AsyncValue.data(
  //       await userservice.getSavedJobs(AuthServ().getUserId()!));
  //   final List<String> savedJobs =
  //       await userservice.getSavedJobs(AuthServ().getUserId()!);
  //   state = AsyncValue.data(savedJobs);
  //   // Future<List<String>> jobs =
  //   //     userServ().getSavedJobs(AuthServ().getUserId()!);
  //   list = savedJobs;
  //   print("ll" + list.toString());
  //   // state = jobscon;
  // }

  Future getFromFirebase() async {
    final userservice = ref.read(userserviceProvider);
    state = const AsyncLoading();

    try {
      final savedJobs =
          await userservice.getSavedJobs(AuthServ().getUserId()!);
      list = savedJobs;
      print("ll" + list.toString());
      state = AsyncValue.data(savedJobs);
    } catch (e) {
      state = AsyncValue.error(e, StackTrace.current);
    }
  }
  // Future<void> getFromFirebase() async {
  //   final userservice = ref.read(userserviceProvider);
  //   state = const AsyncValue.loading();

  //   try {
  //     final userId = AuthServ().getUserId()!;
  //     final List<String> savedJobs = await userservice.getSavedJobs(userId);
  //     state = AsyncValue.data(savedJobs);
  //   } catch (e, stack) {
  //     state = AsyncValue.error(e, stack);
  //   }
  // }

  void _add(String jobId) {
    list = [...list, jobId];
  }

  void _remove(String jobId) {
    list = list.where((id) => id != jobId).toList();
  }

  void updateJobList(String jobId) async {
    if (list.contains(jobId)) {
      _remove(jobId);
    } else {
      _add(jobId);
    }
    await userServ().saveJobToUser(AuthServ().getUserId()!, jobId);
    //state=await userServ().saveJobToUser(AuthServ().getUserId()!, jobId);
  }
}
